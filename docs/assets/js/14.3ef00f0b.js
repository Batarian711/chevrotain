(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{55:function(t,s,n){"use strict";n.r(s);var a=n(0),o=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"automatic-concrete-syntax-tree-creation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#automatic-concrete-syntax-tree-creation","aria-hidden":"true"}},[t._v("#")]),t._v(" Automatic Concrete Syntax Tree Creation")]),n("p",[t._v("Chevrotain has the capability to "),n("strong",[t._v("automatically")]),t._v(" create a concrete syntax tree (CST)\nduring parsing. A CST is a simple structure which represents the "),n("strong",[t._v("entire")]),t._v(" parse tree.\nIt contains information on every token parsed.")]),n("p",[t._v('The main advantage of using the automatic CST creation is that it enables writing "pure" grammars.\nThis means that the semantic actions are '),n("strong",[t._v("not")]),t._v(" embedded into the grammar implementation but are instead\ncompletely "),n("strong",[t._v("separated")]),t._v(" from it.")]),n("p",[t._v("This separation of concerns makes the grammar easier to maintain\nand makes it easier to implement different capabilities on the grammar,\nfor example: separate logic for compilation and for IDE support.")]),n("h2",{attrs:{id:"ast-vs-cst"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ast-vs-cst","aria-hidden":"true"}},[t._v("#")]),t._v(" AST vs CST")]),n("p",[t._v("There are two major differences.")]),n("ol",[n("li",[n("p",[t._v("An "),n("strong",[t._v("A")]),t._v("bstract "),n("strong",[t._v("S")]),t._v("yntax "),n("strong",[t._v("T")]),t._v("ree would not normally contain all the syntactic information.\nThis mean the "),n("strong",[t._v("exact original")]),t._v(" text can not always be re-constructed from the AST.")])]),n("li",[n("p",[t._v("An "),n("strong",[t._v("A")]),t._v("bstract "),n("strong",[t._v("S")]),t._v("yntax "),n("strong",[t._v("T")]),t._v("ree would not represent the whole syntactic parse tree.\nIt would normally only contain nodes related to specific parse tree nodes,\nbut not all of those (mostly leaf nodes).")])])]),n("h2",{attrs:{id:"enabling"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enabling","aria-hidden":"true"}},[t._v("#")]),t._v(" Enabling")]),n("p",[t._v("How to enable CST output?")]),n("p",[t._v("In the future this capability may be enabled by default.\nCurrently this feature must be explicitly enabled by setting the "),n("strong",[t._v("outputCst")]),t._v(" flag.")]),n("p",[t._v("In the parser "),n("a",{attrs:{href:"https://sap.github.io/chevrotain/documentation/3_2_0/interfaces/iparserconfig.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("configuration object")]),t._v(".")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("MyParser")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("chevrotain"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Parser")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("constructor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("super")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" allTokens"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" outputCst"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("h2",{attrs:{id:"structure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#structure","aria-hidden":"true"}},[t._v("#")]),t._v(" Structure")]),n("p",[t._v("The structure of the CST is very simple.")]),n("ul",[n("li",[n("p",[t._v("View it by running the CST creation example in the "),n("a",{attrs:{href:"https://sap.github.io/chevrotain/playground/?example=JSON%20grammar%20and%20automatic%20CST%20output",target:"_blank",rel:"noopener noreferrer"}},[n("strong",[t._v("online playground")])]),t._v(".")])]),n("li",[n("p",[t._v("Note that the following examples are not runnable nor contain the full information.\nThese are just snippets to explain the core concepts.")])])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export type CstElement = IToken | CstNode\nexport type CstChildrenDictionary = { [elementName:string]:CstElement[] }\n\nexport interface CstNode {\n    readonly name:string\n\n    readonly children:CstChildrenDictionary\n\n    readonly recoveredNode?:boolean\n}\n")])]),n("p",[t._v("A single CstNode corresponds to a single grammar rule's invocation result.")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"qualifiedName"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ninput "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('""')]),t._v("\n\noutput "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"qualifiedName"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("Each Terminal will appear in the children dictionary using the terminal's name\nas the key and an "),n("strong",[t._v("array")]),t._v(" of IToken as the value.")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"qualifiedName"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ninput "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"foo.bar"')]),t._v("\n\noutput "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"qualifiedName"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Dot"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"."')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"foo"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"bar"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("Non-Terminals are handled similarly to Terminals except each item in the value's array\nIs the CstNode of the corresponding Grammar Rule (Non-Terminal).")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"qualifiedName"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singleIdent"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"singleIdent"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ninput "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n\noutput "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"qualifiedName"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        singleIdent"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"singleIdent"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                children"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    Identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"foo"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("Note that Terminals and Non-Terminals will only appear in the children object\nif they were actually encountered during parsing.\nThis means that optional grammar productions may or may not appear in a CST node\ndepending on the actual input, e.g:")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"variableStatement"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Var"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("OPTION")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Equals"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Integer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ninput1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"var x"')]),t._v("\n\noutput1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"variableStatement"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Var"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"var"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"x"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v('// no "Equals" or "Integer" keys')]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ninput2 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"var x = 5"')]),t._v("\n\noutput2 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"variableStatement"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Var"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"var"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"x"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Equals"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"="')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Integer"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"5"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("h2",{attrs:{id:"in-lined-rules"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#in-lined-rules","aria-hidden":"true"}},[t._v("#")]),t._v(" In-Lined Rules")]),n("p",[t._v("So far the CST structure is quite simple, but how would a more complex grammar be handled?")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"statements"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("OR")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// let x = 5")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token constant"}},[t._v("ALT")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Let"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Equals"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expression"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// select age from employee where age = 120")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token constant"}},[t._v("ALT")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Select"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("From"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Where"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expression"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),n("p",[t._v("Some of the Terminals and Non-Terminals are used in "),n("strong",[t._v("both")]),t._v(' alternatives.\nIt is possible to check for the existence of distinguishing terminals such as the "Let" and "Select".\nBut this is not a robust approach.')]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cstResult "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" parser"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("qualifiedName")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cstResult"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Let "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" undefined"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Let statement")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// do something...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cstResult"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Select "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" undefined"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Select statement")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// do something else.")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("Alternatively it is possible to refactor the grammar in such a way that both alternatives\nWould be completely wrapped in their own Non-Terminal rules.")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"statements"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("OR")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token constant"}},[t._v("ALT")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("letStatement"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token constant"}},[t._v("ALT")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("selectStatement"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),n("p",[t._v("This is the recommended approach in this case as more and more alternations are added the grammar rule\nwill become too difficult to understand and maintain due to verbosity.\nHowever, sometimes refactoring out rules is too much, this is where "),n("strong",[t._v("in-lined")]),t._v(" rules arrive to the rescue.")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"statements"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("OR")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// let x = 5")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token constant"}},[t._v("NAME")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"$letStatement"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{attrs:{class:"token constant"}},[t._v("ALT")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Let"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Equals"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expression"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// select age from employee where age = 120")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token constant"}},[t._v("NAME")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"$selectStatement"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{attrs:{class:"token constant"}},[t._v("ALT")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Select"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("From"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Where"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expression"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\noutput "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"statements"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// only one of they keys depending on the actual alternative chosen")]),t._v("\n    children"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $letStatement"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),n("span",{attrs:{class:"token comment"}},[t._v("/*...*/")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        $$selectStatement"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),n("span",{attrs:{class:"token comment"}},[t._v("/*...*/")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("Providing a "),n("strong",[t._v("NAME")]),t._v(" property to the DSL methods will create an in-lined rule.\nIt is equivalent to extraction to a separate grammar rule with two differences:")]),n("ul",[n("li",[t._v("To avoid naming conflicts in-lined rules "),n("strong",[t._v("must")]),t._v(" start with a dollar($) sign.")]),n("li",[t._v("In-lined rules do not posses error recovery (re-sync) capabilities as do regular rules.")])]),n("p",[t._v("Syntax Limitation:")]),n("ul",[n("li",[n("p",[t._v("The "),n("strong",[t._v("NAME")]),t._v(" property of an in-lined rule must appear as the "),n("strong",[t._v("first")]),t._v(" property\nof the "),n("strong",[t._v("DSLMethodOpts")]),t._v(" object.")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// GOOD")]),t._v("\n$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"field"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("OPTION")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token constant"}},[t._v("NAME")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"$modifier"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token constant"}},[t._v("DEF")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Static"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// Bad - won't work.")]),t._v("\n$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"field"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("OPTION")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token constant"}},[t._v("DEF")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Static"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token constant"}},[t._v("NAME")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"$modifier"')]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),n("h2",{attrs:{id:"fault-tolerance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fault-tolerance","aria-hidden":"true"}},[t._v("#")]),t._v(" Fault Tolerance")]),n("p",[t._v("CST output is also supported in combination with automatic error recovery.\nThis combination is actually stronger than regular error recovery because\neven partially formed CstNodes will be present on the CST output and be marked\nusing the "),n("strong",[t._v('recoveredNode"')]),t._v(" boolean property.")]),n("p",[t._v('For example given this grammar and assuming the parser re-synced after a token mismatch at\nthe "Where" token:')]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("RULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"SelectClause"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Select"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME2")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("From"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Identifer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Where"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expression"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v('// mismatch token due to typo at "wherrrre", parsing halts and re-syncs to upper rule so')]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v('// the suffix "wherrrre age > 25" is not parsed.')]),t._v("\ninput "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"select age from persons wherrrre age > 25"')]),t._v("\n\noutput "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"SelectClause"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Select"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"select"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"age, persons"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        From"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v('"from"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v('// No "Where" key d,ue to the parse error')]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v('// No "expression" key due to the parse error')]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// This marks a recovered node.")]),t._v("\n    recoveredNode"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("This accessibility of "),n("strong",[t._v("partial parsing results")]),t._v(" means some post-parsing logic\nmay be able to perform farther analysis.\nfor example: offering auto-fix suggestions or provide better error messages.")]),n("h2",{attrs:{id:"traversing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#traversing","aria-hidden":"true"}},[t._v("#")]),t._v(" Traversing")]),n("p",[t._v("So we now know how to create a CST and it's internal structure.\nBut how do we traverse this structure and perform semantic actions?\nSome examples for such semantic actions:")]),n("ul",[n("li",[t._v("Creation of an Abstract Syntax Tree (AST) to be later used in the rest of the compilation pipeline.")]),n("li",[t._v("Running the input text in an interpreter, for example a Calculator's grammar and input can be evaluated to\na numerical value.")]),n("li",[t._v("Extracting specific pieces of information from the input.")])]),n("p",[t._v('One option would be to "manually" recursively "walk" the output CST structure.')]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// Tree Walker")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("toAst")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cst"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" children "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" cst"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cst"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"selectStatement"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" columnsListCst "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" children"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("columnsList"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fromClauseCst "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" children"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fromClause"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" columnsListAst "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("toAst")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("columnsListCst"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fromClauseAst "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("toAst")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fromClauseCst"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"SelectStatementAst"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                columns"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" columnsListAst"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fromClauseAst\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"columnsList"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" columnName "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" children"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("image\n            "),n("span",{attrs:{class:"token comment"}},[t._v("/*...*/")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"fromClause"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token comment"}},[t._v("/*...*/")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Error")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`CST case handler not implemented for CST node <")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("cst"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v(">`")])]),t._v("\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("This is a valid approach, however it can be somewhat error prone:")]),n("ul",[n("li",[t._v("No validation that the case names match the real names of the CST Nodes.")]),n("li",[t._v("The validation for missing case handler (default case) depends on attempting to run toAst with invalid input.\n(Fail slow instead of fail fast...)")]),n("li",[t._v("In-Lined Rules may cause ambiguities as they should be matched on the fullName property not the name property.")])]),n("h2",{attrs:{id:"cst-visitor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cst-visitor","aria-hidden":"true"}},[t._v("#")]),t._v(" CST Visitor")]),n("p",[t._v("For the impatient, See a full runnable example: "),n("a",{attrs:{href:"https://github.com/SAP/chevrotain/blob/master/examples/grammars/calculator/calculator_pure_grammar.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("Calculator Grammar with CSTVisitor interpreter")])]),n("p",[t._v("Chevrotain provides a CSTVisitor class which can make traversing the CST less error prone.")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// The base Visitor Class can be accessed via a Parser **instance**.")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BaseCstVisitor "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" myParserInstance"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("getBaseCstVisitorConstructor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("SqlToAstVisitor")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("BaseCstVisitor")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("constructor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("super")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// This helper will detect any missing or redundant methods on this visitor")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("validateVisitor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("selectStatement")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// ctx.columnsList is an array, while this.visit accepts a CSTNode")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// but if an array is passed to this.visit it will act as though the first element of the array has been passed.")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v('// this means "this.visit(ctx.columnsList)" is equivalent to "this.visit(ctx.columnsList[0])"')]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" columnsListAst "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("visit")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("columnsList"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fromClauseAst "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("visit")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fromClause"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"SelectStatementAst"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            columns"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" columnsListAst"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fromClauseAst\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("columnsList")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" columnName "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctx"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("image\n        "),n("span",{attrs:{class:"token comment"}},[t._v("/*...*/")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v('// Optional "IN" argument')]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("fromClause")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inArg"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("/*...*/")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Visitor methods for in-lined rules are created by appending the in-lined rule name to the parent rule name.")]),t._v("\n    fromClause$"),n("span",{attrs:{class:"token constant"}},[t._v("INLINED_NAME")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("/*...*/")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("ul",[n("li",[n("p",[t._v("Each visitor method will be invoked with the respective CSTNode's children as the first argument\n(called ctx in the above example).")])]),n("li",[n("p",[t._v("Recursively visiting None-Terminals can be accomplished by using the "),n("strong",[t._v("this.visit")]),t._v(" method.\nIt will invoke the appropriate visit method for the CSTNode argument.")])]),n("li",[n("p",[t._v("The "),n("strong",[t._v("this.visit")]),t._v(" method can also be invoked on an array on CSTNodes in that case\nIt is equivalent to calling it on the first element of the input array.")])]),n("li",[n("p",[t._v("Each visit method can return a value which can be used to combine the traversal results.")])]),n("li",[n("p",[t._v("The "),n("strong",[t._v("this.validateVisitor()")]),t._v(" method can be used to detect missing or redundant visitor methods.")]),n("ul",[n("li",[t._v("For example due to a refactoring of the grammar or a typo.")])])]),n("li",[n("p",[t._v('Visitor methods support an optional "IN" parameter.')])])]),n("h3",{attrs:{id:"do-we-always-have-to-implement-all-the-visit-methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#do-we-always-have-to-implement-all-the-visit-methods","aria-hidden":"true"}},[t._v("#")]),t._v(" Do we always have to implement all the visit methods?")]),n("p",[n("strong",[t._v("No")]),t._v(", sometimes we only need to handle a few specific CST Nodes\nIn that case use "),n("strong",[t._v("getBaseCstVisitorConstructorWithDefaults()")]),t._v(" to get the base visitor constructor.\nThis base visitor includes a default implementation for all visit methods\nwhich simply invokes "),n("strong",[t._v("this.visit")]),t._v(" on all none terminals in the CSTNode's children.")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// The base Visitor Class can be accessed via a Parser **instance**.")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BaseCstVisitorWithDefaults "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" myParserInstance"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("getBaseCstVisitorConstructorWithDefaults")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("SqlColumnNamesVisitor")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("BaseCstVisitorWithDefaults")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("constructor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("super")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("validateVisitor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("fromClause")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// collect only the names of the columns")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("result"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Identifier"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("image"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v('// All other visit methods will be "filled" automatically with the default implementation.')]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("Note that when using a visitor with default visit implementations\nIt is not possible to return values from the visit methods because\nthe default implementation does not return any value, only traverses the CST\nthus the chain of returned values will be broken.")]),n("h2",{attrs:{id:"performance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#performance","aria-hidden":"true"}},[t._v("#")]),t._v(" Performance")]),n("p",[t._v("On V8 (Chrome/Node) building the CST was measured at anywhere from 35%-90% of the performance\nversus a pure grammar's runtime (no output) depending on the grammar used.\nParticularly on its level of rules nesting.")]),n("p",[t._v("This may be substantial yet please consider:")]),n("ul",[n("li",[n("p",[t._v("Chevrotain is already "),n("a",{attrs:{href:"https://sap.github.io/chevrotain/performance/",target:"_blank",rel:"noopener noreferrer"}},[t._v("very fast")]),t._v('\nSo at worst at will degrade to just "fast"...')])]),n("li",[n("p",[t._v("This comparison is not fair as a pure grammar that has no output also has very little use...\nThe right comparison would be to versus embedding actions that built some alternative CST/AST output structure.")])]),n("li",[n("p",[t._v("Parsing is usually just one step in a larger flow, so the overall impact even in the slower edge cases\nwould be reduced.")])])]),n("p",[t._v("It is therefore recommended to use the CST creation capabilities\nas its benefits (modularity / ease of maintenance) by far outweigh the costs (potentially reduced performance).\nexcept in unique edge cases.")])])}],!1,null,null,null);s.default=o.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{65:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"faq"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#faq","aria-hidden":"true"}},[t._v("#")]),t._v(" FAQ")]),s("ul",[s("li",[s("a",{attrs:{href:"#VS_GENERATORS"}},[t._v("Why should I use a Parsing DSL instead of a Parser Generator?")])]),s("li",[s("a",{attrs:{href:"#VS_OTHERS"}},[t._v("What Differentiates Chevrotain from other Parsing Libraries?")])]),s("li",[s("a",{attrs:{href:"#WHY_ERROR_RECOVERY"}},[t._v("Why are Error Recovery / Fault Tolerant capabilities needed in a Parser?")])]),s("li",[s("a",{attrs:{href:"##DEBUGGING"}},[t._v("How do I debug my parser?")])]),s("li",[s("a",{attrs:{href:"#NUMERICAL_SUFFIXES"}},[t._v("Why are the unique numerical suffixes (CONSUME1/CONSUME2/...) needed for the DSL Rules?")])]),s("li",[s("a",{attrs:{href:"#MINIFIED"}},[t._v("Why does Chevrotain not work correctly after I minified my Sources?")])]),s("li",[s("a",{attrs:{href:"#WEBPACK"}},[t._v("Why does Chevrotain not work correctly after I webpacked my Sources?")])]),s("li",[s("a",{attrs:{href:"#STUCK_AMBIGUITY"}},[t._v("Why does my parser appear to be stuck during it's initialization?")])]),s("li",[s("a",{attrs:{href:"#PERFORMANCE"}},[t._v("How do I Maximize my parser's performance?")])])]),s("h2",{attrs:{id:"VS_GENERATORS"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#VS_GENERATORS","aria-hidden":"true"}},[t._v("#")]),t._v(" Why should I use a Parsing DSL instead of a Parser Generator?")]),s("p",[t._v("A Parser Generator adds an (unnecessary) level of abstraction between the grammar implementation and the actual parser.\nThis is because the grammar is written in a "),s("strong",[t._v("different")]),t._v(" language than the target runtime.")]),s("ul",[s("li",[s("p",[t._v("Debugging a generated parser means looking at "),s("strong",[t._v("different")]),t._v(" code than the actual grammar specifications.\nThis generated code is often huge, verbose and hard to understand. On the other hand, when debugging a Parser\nimplemented using a Parsing DSL, The "),s("strong",[t._v("actual Grammar's code")]),t._v(" the implementer wrote(not generated code) is debugged.\nSo debugging Chevrotain is "),s("strong",[t._v("just like")]),t._v(" debugging any other JavaScript code.")])]),s("li",[s("p",[t._v("No need to handle grammar generation as part of the build process or commit generated files to the source code.")])]),s("li",[s("p",[t._v("No need to learn a new syntax, as Chevrotain is a "),s("strong",[t._v("Pure")]),t._v(" JavasScript Library. instead the problem is reduced to learning a new API.")])]),s("li",[s("p",[t._v("No need for a special editor to write the Grammar, just use your favorite JavaScript editor.")])])]),s("h2",{attrs:{id:"VS_OTHERS"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#VS_OTHERS","aria-hidden":"true"}},[t._v("#")]),t._v(" What Differentiates Chevrotain from other JavaScript Parsing Solutions?")]),s("ul",[s("li",[s("p",[s("strong",[t._v("Performance")]),t._v(": Chevrotain is generally faster (often much more so) than other existing JavaScript Parsing Solutions.\nAnd can even compete with the performance of hand built parsers.\nSee an "),s("a",{attrs:{href:"https://sap.github.io/chevrotain/performance/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Online Benchmark")]),t._v(" that compares the performance of JSON Parsers implemented using multiple JavaScript Parsing solutions.")])]),s("li",[s("p",[s("strong",[t._v("Error Recovery / Fault Tolerance")]),t._v(": With the exception of Antlr4, other JavaScript Parsing Solutions usually do not have Error Recovery capabilities.")])])]),s("h2",{attrs:{id:"WHY_ERROR_RECOVERY"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#WHY_ERROR_RECOVERY","aria-hidden":"true"}},[t._v("#")]),t._v(" Why are Error Recovery / Fault Tolerant capabilities needed in a Parser?")]),s("p",[t._v("When building a standard compiler that should only handle completely valid inputs these capabilities are indeed irrelevant.\nBut for the use case of building Editor Tools / Language Services the parser must be able to handle partially invalid inputs as well.\nSome examples:")]),s("ul",[s("li",[t._v("All syntax errors should be reported and not just the first one.")]),s("li",[t._v("Refactoring should work even if there is a missing comma somewhere.")]),s("li",[t._v("Autocomplete / Intellisense should work even if there is a syntax error prior to the requested suggestion position.")])]),s("h2",{attrs:{id:"DEBUGGING"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#DEBUGGING","aria-hidden":"true"}},[t._v("#")]),t._v(" How do I debug my parser?")]),s("p",[t._v("Just add a breakpoint in your favorites IDE and debug, same as you would for any other JavaScript code.\nChevrotain Grammars are "),s("strong",[t._v("pure")]),t._v(" javascript code. No special handling required.")]),s("h2",{attrs:{id:"NUMERICAL_SUFFIXES"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#NUMERICAL_SUFFIXES","aria-hidden":"true"}},[t._v("#")]),t._v(" Why are the unique numerical suffixes (CONSUME1/CONSUME2/...) needed for the DSL Rules?")]),s("p",[t._v("Lets look at an example first:")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("RULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"someRule"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("OPTION")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyToken"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("OPTION2")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyOtherToken"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("OPTION3")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME2")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyToken"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("p",[t._v("As you can see this example uses three different variations of OPTION(1|2|3) and two variations of CONSUME(1|2).\nThis is because during parsing runtime Chevrotain must be able to "),s("strong",[t._v("distinguish")]),t._v(" between the variations of the "),s("strong",[t._v("same")]),t._v(" Parsing rule.")]),s("p",[t._v("The combination of the DSL Rule(OPTION/MANY/CONSUME), the DSL Rule's optional numerical suffix and the DSL rule's parameter (if available)\ndefines a "),s("strong",[t._v("unique")]),t._v(" key which Chevrotain uses to "),s("strong",[t._v("figure out")]),t._v(" the current location in the grammar. This location information is then\nused for many things such as:")]),s("ul",[s("li",[t._v("Computing the lookahead function which decides if a DSL rule should be entered or which alternatives should be taken.")]),s("li",[t._v("Computing an appropriate error message which includes the list of next valid possible tokens.")]),s("li",[t._v('Performing automatic Error Recovery by figuring out "re-sync" tokens.')])]),s("h2",{attrs:{id:"MINIFIED"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#MINIFIED","aria-hidden":"true"}},[t._v("#")]),t._v(" Why does Chevrotain not work correctly after I minified my Grammar?")]),s("p",[t._v("Chevrotain relies on "),s("strong",[t._v("Function.name")]),t._v(" property and "),s("strong",[t._v("Function.toString()")]),t._v(".\nThis means that certain aggressive minification options can break Chevrotain grammars.")]),s("p",[t._v("See "),s("a",{attrs:{href:"https://github.com/SAP/chevrotain/blob/master/examples/parser/minification/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("related documentation")]),t._v(" for details & workarounds.")]),s("h2",{attrs:{id:"WEBPACK"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#WEBPACK","aria-hidden":"true"}},[t._v("#")]),t._v(" Why does Chevrotain not work correctly after I webpacked my Grammar?")]),s("p",[t._v("Chevrotain relies on "),s("strong",[t._v("Function.name")]),t._v(" property and "),s("strong",[t._v("Function.toString()")]),t._v(".\nThis means that certain aggressive webpack 2 optimizations (tree shaking) can break Chevrotain grammars under\ncertain conditions.")]),s("p",[t._v("See "),s("a",{attrs:{href:"https://github.com/SAP/chevrotain/blob/master/examples/parser/webpack/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("related documentation")]),t._v(" for details & workarounds.")]),s("h2",{attrs:{id:"STUCK_AMBIGUITY"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#STUCK_AMBIGUITY","aria-hidden":"true"}},[t._v("#")]),t._v(" Why does my parser appear to be stuck during it's initialization?")]),s("p",[t._v("The first time a Chevrotain parser is initialized additional validations and computations are performed.\nSome of these can take a very long time under certain edge cases. Specifically the detection of ambiguous alternatives\nwhen the parser uses a larger than the default "),s("a",{attrs:{href:"https://sap.github.io/chevrotain/documentation/3_3_0/interfaces/iparserconfig.html#maxlookahead",target:"_blank",rel:"noopener noreferrer"}},[t._v("maxLookahead")]),t._v("\nand there are many (thousands) of ambiguous paths.")]),s("p",[t._v("To resolve this try reducing the maxLookahead and inspect the ambiguity errors to fix\nthe grammar ambiguity which is the root cause of the problem.")]),s("h2",{attrs:{id:"PERFORMANCE"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#PERFORMANCE","aria-hidden":"true"}},[t._v("#")]),t._v(" How do I Maximize my parser's performance?")]),s("h3",{attrs:{id:"major-performance-benefits"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#major-performance-benefits","aria-hidden":"true"}},[t._v("#")]),t._v(" Major Performance Benefits")]),s("p",[t._v("These are highly recommended for each and every parser.")]),s("ol",[s("li",[s("p",[s("strong",[t._v("Do not create a new Parser instance for each new input")]),t._v(".")]),s("p",[t._v("Instead re-use a single instance and reset its state between iterations. For example:")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// reuse the same parser instance.")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" parser "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("JsonParserES5")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmodule"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" lexResult "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" JsonLexer"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("tokenize")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// setting a new input will RESET the parser instance's state.")]),t._v("\n    parser"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("input "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" lexResult"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tokens\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" parser"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("json")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        lexErrors"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lexResult"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("errors"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        parseErrors"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parser"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("errors\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),s("p",[t._v("This will avoid the fixed cost of reinitializing a parser instance.\nBut more importantly this pattern seems to help V8 Engine to avoid de-optimizations.\nSuch a pattern can lead to 15%-100% performance boost on V8 (Node.js/Chrome) depending on the grammar used.")]),s("p",[t._v('Note that this means that if your parser "carries" additional state, that state should also be reset.\nSimply override the Parser\'s '),s("a",{attrs:{href:"https://sap.github.io/chevrotain/documentation/3_3_0/classes/parser.html#reset",target:"_blank",rel:"noopener noreferrer"}},[t._v("reset")]),t._v(" method\nto accomplish that.")])]),s("li",[s("p",[s("strong",[t._v("Ensure that the lexer's optimizations are enabled")]),t._v(".")]),s("p",[t._v("The Chevrotain Lexer performs optimizations by filtering the potential token matchs\nusing the next "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",target:"_blank",rel:"noopener noreferrer"}},[t._v("charCode")]),t._v(" to be consumed.\nThese optimizattions can provide anywhere from a "),s("strong",[t._v("30% boost")]),t._v(" for small lexers\nto "),s("strong",[t._v("several multipiles")]),t._v(" improvment in large Lexers with many TokenTypes.")]),s("p",[t._v("To apply this optimization the first possible charCodes for "),s("strong",[t._v("every")]),t._v(" TokenType must be identified.\nSometimes a TokenType's first charCodes cannot be automatically identified.\nIn that case the lexer will "),s("strong",[t._v("silently")]),t._v(" revert to using the unoptimized algorithims.")]),s("p",[t._v("It it possible to configure the Lexer "),s("strong",[t._v("throw")]),t._v(' an error\nin case the optimizations cannot be enabled by turning on the\n"ensureOptimizations" flag:')]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Lexer "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("require")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"chevrotain"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myLexer "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Lexer")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("/* tokens */")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ensureOptimizations"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("p",[t._v('With the "ensureOptimizations" flag enabled the Lexer will also print error messages\nto the console with details on how to resolve optimiations errors.')])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[s("strong",[t._v("Avoid reinitializing large arrays of alternatives")]),t._v(".")]),s("p",[t._v("The syntax for alternatives (OR) requires creating an array on every "),s("strong",[t._v("single")]),t._v(" invocation.\nFor large enough arrays and in rules which are called often this can cause quite a large performance penalty.")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("RULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"value"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("OR")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// an array with seven alternatives")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StringLiteral"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NumberLiteral"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("object"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("True"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("False"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Null"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("p",[t._v("A simple JavaScript pattern can avoid this costly re-initilization:")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("RULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"value"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v('// c1 is used as a cache, the short circute "||" will ensure only a single initilization')]),t._v("\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("OR")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1 "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1 "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StringLiteral"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NumberLiteral"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("object"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("True"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("False"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Null"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("p",[t._v("Applying this pattern (in just a single location) on a JSON grammar provided 25-30% performance boost\n(Node.js 8), For a CSS grammar (2 locations) this resulted in about 20% speed boost.")])])]),s("p",[t._v("It is important to note that:")]),s("ul",[s("li",[s("p",[t._v("This pattern should only be applied on largish number of alternatives, testing on node.js 8.0 showed\nit was only useful when there are at least four alternatives. In cases with fewer alternatives this pattern\nwould actually be "),s("strong",[t._v("slower")]),t._v("!")])]),s("li",[s("p",[t._v("This pattern can only be applied if there are no vars which can change accessed via closures.\nExample:")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// BAD")]),t._v("\n$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("RULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"value"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result\n    "),s("span",{attrs:{class:"token comment"}},[t._v('// We reference the "result" variable via a closure.')]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// So a new function is needed each time this grammar rule is invoked.")]),t._v("\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("OR")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1 "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1 "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        result "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StringLiteral"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// GOOD")]),t._v("\n$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("RULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"value"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// no closure for the result variable, we use the returned value of the OR instead.")]),t._v("\n    result "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("OR")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1 "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1 "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StringLiteral"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("ul",[s("li",[t._v("Note that gates / predicaetes often use vars from closures.")])])]),s("li",[s("p",[t._v("Due to the way Chevrotain is built, the text of the alternatives cannot be completly extracted from the grammar rule")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// defined outside the rule")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myAlts "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token constant"}},[t._v("ALT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StringLiteral"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// Won't work")]),t._v("\n$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("RULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"value"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// Chevrotain won't be able to analyze this grammar rule as it relies on Function.prototype.toString")]),t._v("\n    result "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("OR")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myAlts"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("li",[s("p",[t._v("Avoid dynamically changing the parser instance. The line:")]),s("blockquote",[s("p",[t._v("\"$.c1 || ($.c1 = ...\" ($ is 'this')")])]),s("p",[t._v("Will cause a 'c1' property to be assigned to the parser instance.\nThis may seem innocent but if enough properties are added dynamically to an instance\nits V8 hidden class will change which could cause a severe performance reduction.")]),s("p",[t._v('To avoid this, simpliy define these "cache properties" in the constructor.\nSee an example in the '),s("a",{attrs:{href:"https://github.com/SAP/chevrotain/blob/ac21570b97a8de0d6b91f29979aed8041455cacd/examples/grammars/ecma5/ecma5_parser.js#L37-L43",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript5 grammar's constructor")]),t._v(".")])])]),s("h3",{attrs:{id:"minor-performance-benefits"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#minor-performance-benefits","aria-hidden":"true"}},[t._v("#")]),t._v(" Minor Performance Benefits")]),s("p",[t._v("These are only required if you are trying to squeeze every tiny bit of performance out of your parser.")]),s("ol",[s("li",[s("p",[t._v("Reduce the amount of Token position tracking the lexer performs.\nSee The "),s("a",{attrs:{href:"https://sap.github.io/chevrotain/documentation/3_3_0/interfaces/ilexerconfig.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ILexerConfig.positionTracking")]),t._v(" property.")])]),s("li",[s("p",[s("strong",[t._v("Avoid creating parsing rules which only parse a single Terminal.")])]),s("p",[t._v("There is a certain fixed overhead for the invocation of each parsing rule.\nNormally there is no reason to pay it for a Rule which only consumes a single Terminal.\nFor example:")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myRedundantRule "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("RULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"myRedundantRule"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StringLiteral"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("p",[t._v("Instead such a rule's contents should be (manually) in-lined in its call sites.")])]),s("li",[s("p",[s("strong",[t._v("Avoid *_SEP DSL methods (MANY_SEP / AT_LEAST_ONE_SEP).")])]),s("p",[t._v("The *_SEP DSL methods also collect the separator Tokens parsed. Creating these arrays has a small overhead (several percentage).\nWhich is a complete waste in most cases where those separators tokens are not needed for any output data structure.")])]),s("li",[s("p",[s("strong",[t._v("Use the returned values of iteration DSL methods (MANY/MANY_SEP/AT_LEAST_ONE/AT_LEAST_ONE_SEP).")])]),s("p",[t._v("Consider the following grammar rule:")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("RULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"array"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myArr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LSquare"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    values"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("push")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("MANY")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Comma"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        values"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("push")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("SUBRULE2")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RSquare"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("p",[t._v('The values of the array are manually collected inside the "myArr" array.\nHowever another result array is already created by invoking the iteration DSL method "MANY"\nThis is obviously a waste of cpu cycles...')]),s("p",[t._v("A slightly more efficient (but syntactically ugly) alternative would be:")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("RULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"array"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myArr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LSquare"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    values"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("push")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("SUBRULE")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" iterationResult "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("MANY")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Comma"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("SUBRULE2")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    myArr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" myArr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("concat")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterationResult"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    $"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token constant"}},[t._v("CONSUME")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RSquare"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])}],!1,null,null,null);a.default=e.exports}}]);
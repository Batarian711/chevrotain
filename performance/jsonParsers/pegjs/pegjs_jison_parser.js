window.pegjsParser = (function() {
    /*
     * Generated by PEG.js 0.8.0.
     *
     * http://pegjs.majda.cz/
     */

    function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function SyntaxError(message, expected, found, offset, line, column) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.offset   = offset;
        this.line     = line;
        this.column   = column;

        this.name     = "SyntaxError";
    }

    peg$subclass(SyntaxError, Error);

    function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},

            peg$FAILED = {},

            peg$startRuleFunctions = { JSON_text: peg$parseJSON_text },
            peg$startRuleFunction  = peg$parseJSON_text,

            peg$c0 = peg$FAILED,
            peg$c1 = function(value) { return value; },
            peg$c2 = "[",
            peg$c3 = { type: "literal", value: "[", description: "\"[\"" },
            peg$c4 = "{",
            peg$c5 = { type: "literal", value: "{", description: "\"{\"" },
            peg$c6 = "]",
            peg$c7 = { type: "literal", value: "]", description: "\"]\"" },
            peg$c8 = "}",
            peg$c9 = { type: "literal", value: "}", description: "\"}\"" },
            peg$c10 = ":",
            peg$c11 = { type: "literal", value: ":", description: "\":\"" },
            peg$c12 = ",",
            peg$c13 = { type: "literal", value: ",", description: "\",\"" },
            peg$c14 = { type: "other", description: "whitespace" },
            peg$c15 = [],
            peg$c16 = /^[ \t\n\r]/,
            peg$c17 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
            peg$c18 = "false",
            peg$c19 = { type: "literal", value: "false", description: "\"false\"" },
            peg$c20 = "null",
            peg$c21 = { type: "literal", value: "null", description: "\"null\"" },
            peg$c22 = "true",
            peg$c23 = { type: "literal", value: "true", description: "\"true\"" },
            peg$c24 = null,
            peg$c25 = { type: "other", description: "number" },
            peg$c26 = ".",
            peg$c27 = { type: "literal", value: ".", description: "\".\"" },
            peg$c28 = /^[1-9]/,
            peg$c29 = { type: "class", value: "[1-9]", description: "[1-9]" },
            peg$c30 = /^[eE]/,
            peg$c31 = { type: "class", value: "[eE]", description: "[eE]" },
            peg$c32 = "-",
            peg$c33 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c34 = "+",
            peg$c35 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c36 = "0",
            peg$c37 = { type: "literal", value: "0", description: "\"0\"" },
            peg$c38 = { type: "other", description: "string" },
            peg$c39 = "\"",
            peg$c40 = { type: "literal", value: "\"", description: "\"\\\"\"" },
            peg$c41 = "\\",
            peg$c42 = { type: "literal", value: "\\", description: "\"\\\\\"" },
            peg$c43 = "/",
            peg$c44 = { type: "literal", value: "/", description: "\"/\"" },
            peg$c45 = "b",
            peg$c46 = { type: "literal", value: "b", description: "\"b\"" },
            peg$c47 = "f",
            peg$c48 = { type: "literal", value: "f", description: "\"f\"" },
            peg$c49 = "n",
            peg$c50 = { type: "literal", value: "n", description: "\"n\"" },
            peg$c51 = "r",
            peg$c52 = { type: "literal", value: "r", description: "\"r\"" },
            peg$c53 = "t",
            peg$c54 = { type: "literal", value: "t", description: "\"t\"" },
            peg$c55 = "u",
            peg$c56 = { type: "literal", value: "u", description: "\"u\"" },
            peg$c57 = /^[ -!#-[\]-\u10FFFF]/,
            peg$c58 = { type: "class", value: "[ -!#-[\\]-\\u10FFFF]", description: "[ -!#-[\\]-\\u10FFFF]" },
            peg$c59 = /^[0-9]/,
            peg$c60 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c61 = /^[0-9a-f]/i,
            peg$c62 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },

            peg$currPos          = 0,
            peg$reportedPos      = 0,
            peg$cachedPos        = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$result;

        if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }

            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg$reportedPos, peg$currPos);
        }

        function offset() {
            return peg$reportedPos;
        }

        function line() {
            return peg$computePosDetails(peg$reportedPos).line;
        }

        function column() {
            return peg$computePosDetails(peg$reportedPos).column;
        }

        function expected(description) {
            throw peg$buildException(
                null,
                [{ type: "other", description: description }],
                peg$reportedPos
            );
        }

        function error(message) {
            throw peg$buildException(message, null, peg$reportedPos);
        }

        function peg$computePosDetails(pos) {
            function advance(details, startPos, endPos) {
                var p, ch;

                for (p = startPos; p < endPos; p++) {
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) { details.line++; }
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }
                }
            }

            if (peg$cachedPos !== pos) {
                if (peg$cachedPos > pos) {
                    peg$cachedPos = 0;
                    peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
                }
                advance(peg$cachedPosDetails, peg$cachedPos, pos);
                peg$cachedPos = pos;
            }

            return peg$cachedPosDetails;
        }

        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) { return; }

            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, pos) {
            function cleanupExpected(expected) {
                var i = 1;

                expected.sort(function(a, b) {
                    if (a.description < b.description) {
                        return -1;
                    } else if (a.description > b.description) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                while (i < expected.length) {
                    if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                    } else {
                        i++;
                    }
                }
            }

            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

                    return s
                        .replace(/\\/g,   '\\\\')
                        .replace(/"/g,    '\\"')
                        .replace(/\x08/g, '\\b')
                        .replace(/\t/g,   '\\t')
                        .replace(/\n/g,   '\\n')
                        .replace(/\f/g,   '\\f')
                        .replace(/\r/g,   '\\r')
                        .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                        .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                        .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                        .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
                }

                var expectedDescs = new Array(expected.length),
                    expectedDesc, foundDesc, i;

                for (i = 0; i < expected.length; i++) {
                    expectedDescs[i] = expected[i].description;
                }

                expectedDesc = expected.length > 1
                    ? expectedDescs.slice(0, -1).join(", ")
                + " or "
                + expectedDescs[expected.length - 1]
                    : expectedDescs[0];

                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }

            var posDetails = peg$computePosDetails(pos),
                found      = pos < input.length ? input.charAt(pos) : null;

            if (expected !== null) {
                cleanupExpected(expected);
            }

            return new SyntaxError(
                message !== null ? message : buildMessage(expected, found),
                expected,
                found,
                pos,
                posDetails.line,
                posDetails.column
            );
        }

        function peg$parseJSON_text() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsews();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsevalue();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c1(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsebegin_array() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsews();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 91) {
                    s2 = peg$c2;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c3); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsebegin_object() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsews();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                    s2 = peg$c4;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseend_array() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsews();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                    s2 = peg$c6;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c7); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseend_object() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsews();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                    s2 = peg$c8;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c9); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsename_separator() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsews();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s2 = peg$c10;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c11); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsevalue_separator() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsews();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s2 = peg$c12;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c13); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsews() {
            var s0, s1;

            peg$silentFails++;
            s0 = [];
            if (peg$c16.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                if (peg$c16.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }

            return s0;
        }

        function peg$parsevalue() {
            var s0;

            s0 = peg$parsefalse();
            if (s0 === peg$FAILED) {
                s0 = peg$parsenull();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsetrue();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseobject();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsearray();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parsenumber();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parsestring();
                                }
                            }
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parsefalse() {
            var s0;

            if (input.substr(peg$currPos, 5) === peg$c18) {
                s0 = peg$c18;
                peg$currPos += 5;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }

            return s0;
        }

        function peg$parsenull() {
            var s0;

            if (input.substr(peg$currPos, 4) === peg$c20) {
                s0 = peg$c20;
                peg$currPos += 4;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }

            return s0;
        }

        function peg$parsetrue() {
            var s0;

            if (input.substr(peg$currPos, 4) === peg$c22) {
                s0 = peg$c22;
                peg$currPos += 4;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c23); }
            }

            return s0;
        }

        function peg$parseobject() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg$currPos;
            s1 = peg$parsebegin_object();
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parsemember();
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$currPos;
                    s6 = peg$parsevalue_separator();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parsemember();
                        if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                    }
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$currPos;
                        s6 = peg$parsevalue_separator();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parsemember();
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$c24;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseend_object();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsemember() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsestring();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsename_separator();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsevalue();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsearray() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg$currPos;
            s1 = peg$parsebegin_array();
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parsevalue();
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$currPos;
                    s6 = peg$parsevalue_separator();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parsevalue();
                        if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                    }
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$currPos;
                        s6 = peg$parsevalue_separator();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parsevalue();
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$c24;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseend_array();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsenumber() {
            var s0, s1, s2, s3, s4;

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseminus();
            if (s1 === peg$FAILED) {
                s1 = peg$c24;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseint();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsefrac();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c24;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseexp();
                        if (s4 === peg$FAILED) {
                            s4 = peg$c24;
                        }
                        if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c25); }
            }

            return s0;
        }

        function peg$parsedecimal_point() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 46) {
                s0 = peg$c26;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }

            return s0;
        }

        function peg$parsedigit1_9() {
            var s0;

            if (peg$c28.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }

            return s0;
        }

        function peg$parsee() {
            var s0;

            if (peg$c30.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }

            return s0;
        }

        function peg$parseexp() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parsee();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseminus();
                if (s2 === peg$FAILED) {
                    s2 = peg$parseplus();
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$c24;
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseDIGIT();
                    if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parseDIGIT();
                        }
                    } else {
                        s3 = peg$c0;
                    }
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsefrac() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsedecimal_point();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseDIGIT();
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseDIGIT();
                    }
                } else {
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseint() {
            var s0, s1, s2, s3;

            s0 = peg$parsezero();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsedigit1_9();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseDIGIT();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseDIGIT();
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            return s0;
        }

        function peg$parseminus() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 45) {
                s0 = peg$c32;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }

            return s0;
        }

        function peg$parseplus() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 43) {
                s0 = peg$c34;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
            }

            return s0;
        }

        function peg$parsezero() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 48) {
                s0 = peg$c36;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }

            return s0;
        }

        function peg$parsestring() {
            var s0, s1, s2, s3;

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsequotation_mark();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsechar();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsechar();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsequotation_mark();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c38); }
            }

            return s0;
        }

        function peg$parsechar() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

            s0 = peg$parseunescaped();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseescape();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                        s2 = peg$c39;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c40); }
                    }
                    if (s2 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 92) {
                            s2 = peg$c41;
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c42); }
                        }
                        if (s2 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 47) {
                                s2 = peg$c43;
                                peg$currPos++;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c44); }
                            }
                            if (s2 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 98) {
                                    s2 = peg$c45;
                                    peg$currPos++;
                                } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
                                }
                                if (s2 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 102) {
                                        s2 = peg$c47;
                                        peg$currPos++;
                                    } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c48); }
                                    }
                                    if (s2 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 110) {
                                            s2 = peg$c49;
                                            peg$currPos++;
                                        } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c50); }
                                        }
                                        if (s2 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 114) {
                                                s2 = peg$c51;
                                                peg$currPos++;
                                            } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                            }
                                            if (s2 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 116) {
                                                    s2 = peg$c53;
                                                    peg$currPos++;
                                                } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c54); }
                                                }
                                                if (s2 === peg$FAILED) {
                                                    s2 = peg$currPos;
                                                    if (input.charCodeAt(peg$currPos) === 117) {
                                                        s3 = peg$c55;
                                                        peg$currPos++;
                                                    } else {
                                                        s3 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c56); }
                                                    }
                                                    if (s3 !== peg$FAILED) {
                                                        s4 = peg$currPos;
                                                        s5 = peg$currPos;
                                                        s6 = peg$parseHEXDIG();
                                                        if (s6 !== peg$FAILED) {
                                                            s7 = peg$parseHEXDIG();
                                                            if (s7 !== peg$FAILED) {
                                                                s8 = peg$parseHEXDIG();
                                                                if (s8 !== peg$FAILED) {
                                                                    s9 = peg$parseHEXDIG();
                                                                    if (s9 !== peg$FAILED) {
                                                                        s6 = [s6, s7, s8, s9];
                                                                        s5 = s6;
                                                                    } else {
                                                                        peg$currPos = s5;
                                                                        s5 = peg$c0;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s5;
                                                                    s5 = peg$c0;
                                                                }
                                                            } else {
                                                                peg$currPos = s5;
                                                                s5 = peg$c0;
                                                            }
                                                        } else {
                                                            peg$currPos = s5;
                                                            s5 = peg$c0;
                                                        }
                                                        if (s5 !== peg$FAILED) {
                                                            s5 = input.substring(s4, peg$currPos);
                                                        }
                                                        s4 = s5;
                                                        if (s4 !== peg$FAILED) {
                                                            s3 = [s3, s4];
                                                            s2 = s3;
                                                        } else {
                                                            peg$currPos = s2;
                                                            s2 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s2;
                                                        s2 = peg$c0;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            return s0;
        }

        function peg$parseescape() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 92) {
                s0 = peg$c41;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }

            return s0;
        }

        function peg$parsequotation_mark() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 34) {
                s0 = peg$c39;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c40); }
            }

            return s0;
        }

        function peg$parseunescaped() {
            var s0;

            if (peg$c57.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c58); }
            }

            return s0;
        }

        function peg$parseDIGIT() {
            var s0;

            if (peg$c59.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c60); }
            }

            return s0;
        }

        function peg$parseHEXDIG() {
            var s0;

            if (peg$c61.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c62); }
            }

            return s0;
        }

        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail({ type: "end", description: "end of input" });
            }

            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
    }

    return {
        SyntaxError: SyntaxError,
        parse:       parse
    };
})();
